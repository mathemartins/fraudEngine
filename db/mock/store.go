// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mathemartins/fraudEngine/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/mathemartins/fraudEngine/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateUserWatch mocks base method.
func (m *MockStore) CreateUserWatch(arg0 context.Context, arg1 db.CreateUserWatchParams) (db.UserWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWatch", arg0, arg1)
	ret0, _ := ret[0].(db.UserWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWatch indicates an expected call of CreateUserWatch.
func (mr *MockStoreMockRecorder) CreateUserWatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWatch", reflect.TypeOf((*MockStore)(nil).CreateUserWatch), arg0, arg1)
}

// DeleteUserFromWatch mocks base method.
func (m *MockStore) DeleteUserFromWatch(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromWatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromWatch indicates an expected call of DeleteUserFromWatch.
func (mr *MockStoreMockRecorder) DeleteUserFromWatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromWatch", reflect.TypeOf((*MockStore)(nil).DeleteUserFromWatch), arg0, arg1)
}

// GetUserWatch mocks base method.
func (m *MockStore) GetUserWatch(arg0 context.Context, arg1 uuid.UUID) (db.UserWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWatch", arg0, arg1)
	ret0, _ := ret[0].(db.UserWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWatch indicates an expected call of GetUserWatch.
func (mr *MockStoreMockRecorder) GetUserWatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWatch", reflect.TypeOf((*MockStore)(nil).GetUserWatch), arg0, arg1)
}

// GetUserWatchForUpdate mocks base method.
func (m *MockStore) GetUserWatchForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.UserWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWatchForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.UserWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWatchForUpdate indicates an expected call of GetUserWatchForUpdate.
func (mr *MockStoreMockRecorder) GetUserWatchForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWatchForUpdate", reflect.TypeOf((*MockStore)(nil).GetUserWatchForUpdate), arg0, arg1)
}

// ListUsersOnWatch mocks base method.
func (m *MockStore) ListUsersOnWatch(arg0 context.Context, arg1 db.ListUsersOnWatchParams) ([]db.UserWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOnWatch", arg0, arg1)
	ret0, _ := ret[0].([]db.UserWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersOnWatch indicates an expected call of ListUsersOnWatch.
func (mr *MockStoreMockRecorder) ListUsersOnWatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOnWatch", reflect.TypeOf((*MockStore)(nil).ListUsersOnWatch), arg0, arg1)
}

// UpdateUserWatch mocks base method.
func (m *MockStore) UpdateUserWatch(arg0 context.Context, arg1 db.UpdateUserWatchParams) (db.UserWatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWatch", arg0, arg1)
	ret0, _ := ret[0].(db.UserWatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWatch indicates an expected call of UpdateUserWatch.
func (mr *MockStoreMockRecorder) UpdateUserWatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWatch", reflect.TypeOf((*MockStore)(nil).UpdateUserWatch), arg0, arg1)
}
