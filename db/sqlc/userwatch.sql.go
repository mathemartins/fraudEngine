// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: userwatch.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserWatch = `-- name: CreateUserWatch :one
INSERT INTO user_watches (
  user_id,
  watch_reason
) VALUES (
  $1, $2
) RETURNING id, user_id, watch_reason, created_at
`

type CreateUserWatchParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WatchReason string    `json:"watch_reason"`
}

func (q *Queries) CreateUserWatch(ctx context.Context, arg CreateUserWatchParams) (UserWatch, error) {
	row := q.db.QueryRow(ctx, createUserWatch, arg.UserID, arg.WatchReason)
	var i UserWatch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WatchReason,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserFromWatch = `-- name: DeleteUserFromWatch :exec
DELETE FROM user_watches
WHERE user_id = $1
`

func (q *Queries) DeleteUserFromWatch(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserFromWatch, userID)
	return err
}

const getUserWatch = `-- name: GetUserWatch :one
SELECT id, user_id, watch_reason, created_at FROM user_watches
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserWatch(ctx context.Context, userID uuid.UUID) (UserWatch, error) {
	row := q.db.QueryRow(ctx, getUserWatch, userID)
	var i UserWatch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WatchReason,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWatchForUpdate = `-- name: GetUserWatchForUpdate :one
SELECT id, user_id, watch_reason, created_at FROM user_watches
WHERE user_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserWatchForUpdate(ctx context.Context, userID uuid.UUID) (UserWatch, error) {
	row := q.db.QueryRow(ctx, getUserWatchForUpdate, userID)
	var i UserWatch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WatchReason,
		&i.CreatedAt,
	)
	return i, err
}

const listUsersOnWatch = `-- name: ListUsersOnWatch :many
SELECT id, user_id, watch_reason, created_at FROM user_watches
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersOnWatchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsersOnWatch(ctx context.Context, arg ListUsersOnWatchParams) ([]UserWatch, error) {
	rows, err := q.db.Query(ctx, listUsersOnWatch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserWatch{}
	for rows.Next() {
		var i UserWatch
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WatchReason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWatch = `-- name: UpdateUserWatch :one
UPDATE user_watches
SET watch_reason = $2
WHERE user_id = $1
RETURNING id, user_id, watch_reason, created_at
`

type UpdateUserWatchParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WatchReason string    `json:"watch_reason"`
}

func (q *Queries) UpdateUserWatch(ctx context.Context, arg UpdateUserWatchParams) (UserWatch, error) {
	row := q.db.QueryRow(ctx, updateUserWatch, arg.UserID, arg.WatchReason)
	var i UserWatch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WatchReason,
		&i.CreatedAt,
	)
	return i, err
}
